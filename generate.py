import json
from functools import wraps
import time
import asyncio
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from dotenv import load_dotenv
from pdf_converter import PDFConverter
from bs4 import BeautifulSoup
import os
import aiofiles
from cache_manager import cache_manager
import shutil

load_dotenv()

# Crear carpeta para PDFs si no existe
PDF_OUTPUT_DIR = "pdfs_generados"
if not os.path.exists(PDF_OUTPUT_DIR):
    os.makedirs(PDF_OUTPUT_DIR)
    print(f"üìÅ Carpeta creada: {PDF_OUTPUT_DIR}")

url1_selenium = os.getenv('URL_SELENIUM_1')
url2_selenium = os.getenv('URL_SELENIUM_2')
user_s = os.getenv('USER_SELENIUM')
password_s = os.getenv('PASSWORD_SELENIUM')
button_s = os.getenv('BUTTON_SELECTOR')
input_s = os.getenv('INPUT_SELECTOR')

def buscar_elemento_creditos_directo(driver, texto_buscar="Cr√©ditos"):
    """
    Busca un elemento espec√≠fico directamente en Selenium sin archivos intermedios
    """
    try:
        # Buscar todas las secciones tile-group
        tile_groups = driver.find_elements(By.CSS_SELECTOR, "div.tile-group.quadro")
        
        for group in tile_groups:
            try:
                # Buscar el t√≠tulo de la secci√≥n
                title = group.find_element(By.CSS_SELECTOR, "span.tile-group-title")
                if "Creditos" in title.text:
                    # Buscar el contenedor de tiles
                    tile_container = group.find_element(By.CSS_SELECTOR, "div.tile-container")
                    elementos = tile_container.find_elements(By.CSS_SELECTOR, "div[data-role='tile']")
                    
                    for elemento in elementos:
                        try:
                            label = elemento.find_element(By.CSS_SELECTOR, "span.tile-label")
                            if texto_buscar.lower() in label.text.lower():
                                return elemento
                        except:
                            continue
            except:
                continue
    except Exception as e:
        print(f"Error buscando elemento: {e}")
    
    return None

async def selenium_dni_async(user_dni):
    """Funci√≥n as√≠ncrona que usa Selenium para extraer datos del DNI"""
    
    try:
        print(f"üîç Procesando DNI: {user_dni}")
        
        # 1. Verificar cache primero
        cached_result = await cache_manager.get_cached_pdf(user_dni)
        if cached_result:
            print(f"üìã Cache HIT: {user_dni}")
            # Copiar PDF del cache al directorio de reportes
            cached_pdf_path = cached_result['pdf_path']
            target_filename = os.path.join(PDF_OUTPUT_DIR, f"reporte_{user_dni}.pdf")
            target_path = target_filename
            
            try:
                shutil.copy2(cached_pdf_path, target_path)
                print(f"üìã PDF servido desde cache: {target_filename}")
                
                return {
                    "success": True,
                    "filename": target_filename,
                    "message": f"PDF generado exitosamente desde cache para DNI {user_dni}",
                    "cached": True,
                    "cache_created_at": cached_result.get('created_at'),
                    "file_size": cached_result.get('file_size', 0)
                }
            except Exception as e:
                print(f"‚ö†Ô∏è Error copiando desde cache, regenerando: {e}")
                # Si falla la copia, continuar con generaci√≥n normal
        else:
            print(f"üìã Cache MISS: {user_dni}")
        
        # 2. Generar PDF normalmente si no est√° en cache
        print(f"üîÑ Generando nuevo PDF para DNI: {user_dni}")

    except Exception as e:
        print(f"‚ö†Ô∏è Error en la operaci√≥n de Selenium: {e}")
        return {
            "success": False,
            "message": f"Error en la operaci√≥n de Selenium para DNI {user_dni}: {e}"
        }
    
    
    def _selenium_sync_operation(user_dni):
        """Operaci√≥n s√≠ncrona de Selenium que se ejecutar√° en un hilo separado"""
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--incognito')
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)

        try:
            driver.get(url1_selenium)

            # üîπ Iniciar sesi√≥n en la web
            driver.find_element(By.XPATH, "//input[@class='mdl-textfield__input']").send_keys(user_s)
            driver.find_element(By.XPATH, "//input[@id='password']").send_keys(password_s)
            driver.find_element(By.XPATH, "//button[@id='login-btn']").click()
            time.sleep(1)
            
            # ‚úÖ VERSI√ìN DIRECTA - Sin archivos intermedios
            elemento_creditos = buscar_elemento_creditos_directo(driver, "Cr√©ditos")
            if elemento_creditos:
                elemento_creditos.click()
                time.sleep(1)
            else:
                print("No se encontr√≥ el elemento Cr√©ditos")

            time.sleep(1)  
            elemento = driver.find_element(By.XPATH, "/html/body/div[1]/div[2]/div[2]/div[2]/div[2]/div/div/table/tbody/tr/td[2]/table/tbody/tr/td[1]/input")
            id_elemento = elemento.get_attribute("id")
            
            driver.find_element(By.XPATH, f"//input[@id='{id_elemento}']").send_keys(f"{user_dni}")
            time.sleep(2)

            # üîπ Buscar en la tabla
            filas = driver.find_elements(By.XPATH, "/html/body/div[1]/div[2]/div[2]/div[2]/div[4]/div/table//tr")

            # Si no hay resultados
            if len(filas) == 0:
                return {"error": "Cliente no encontrado o sin cr√©dito activo"}

            # Extraer datos de la primera fila
            data_dict = {}
            for row in filas:
                celdas = row.find_elements(By.XPATH, ".//td")
                if len(celdas) == 9:
                    data_dict = {
                        'id': celdas[0].text,
                        'dni': celdas[1].text,
                        'name': celdas[2].text,
                        'status': celdas[8].text
                    }
                    break

            # üîπ Verificar si el cr√©dito est√° cancelado
            if data_dict.get("status") == "CANCELADO":
                return {"error": "Ya cancel√≥ su cr√©dito"}

            # üîπ Descargar el reporte HTML
            id_unico = data_dict['id']
            driver.get(f"{url2_selenium}/{id_unico}?_cp=1")
            time.sleep(2)
            
            elemento = driver.find_element(By.XPATH, "/html")
            html_tabla = elemento.get_attribute('outerHTML')

            return {
                "html_content": html_tabla,
                "data_dict": data_dict,
                "success": True
            }
            
        except Exception as e:
            print(f"Error en selenium_dni: {e}")
            return {
                "success": False,
                "error": str(e)
            }
        finally:
            if driver:
                driver.quit()
    
    # Ejecutar la operaci√≥n de Selenium en un hilo separado
    loop = asyncio.get_event_loop()
    selenium_result = await loop.run_in_executor(None, _selenium_sync_operation, user_dni)
    
    if not selenium_result.get("success", False):
        return selenium_result
    
    try:
        # Crear nombre √∫nico para el archivo HTML
        html_filename = f"arch_{user_dni}.html"
        
        # Escribir HTML de forma as√≠ncrona
        async with aiofiles.open(html_filename, "w", encoding="utf-8") as archivo:
            await archivo.write(selenium_result["html_content"])
        
        print("Generando reporte PDF...")
        
        # Crear instancia del convertidor
        converter = PDFConverter()
        data_dict = selenium_result["data_dict"]
        print(data_dict['dni'])
        
        # Definir ruta completa del PDF en la carpeta espec√≠fica
        pdf_filename = os.path.join(PDF_OUTPUT_DIR, f"reporte_{data_dict['dni']}.pdf")
        
        # Convertir HTML a PDF de forma as√≠ncrona
        resultado = await converter.convertir_async(
            html_filename, 
            pdf_filename
        )
        
        if resultado['success']:
            # Verificar que el archivo existe y obtener su tama√±o
            if os.path.exists(pdf_filename):
                file_size = os.path.getsize(pdf_filename)
                print(f"‚úÖ PDF generado: {pdf_filename}")
                print(f"üìÅ Tama√±o: {file_size} bytes")
                
                # 3. Guardar en cache
                try:
                    await cache_manager.cache_pdf(user_dni, pdf_filename)
                    print(f"üíæ PDF guardado en cache: {user_dni}")
                except Exception as cache_error:
                    print(f"‚ö†Ô∏è Error guardando en cache: {cache_error}")
                
                # Limpiar archivo HTML temporal
                try:
                    if os.path.exists(html_filename):
                        os.remove(html_filename)
                        print(f"üóëÔ∏è Archivo HTML temporal eliminado: {html_filename}")
                except Exception as cleanup_error:
                    print(f"‚ö†Ô∏è Error eliminando HTML temporal: {cleanup_error}")
                
                # Opcional: limpiar PDFs antiguos de forma as√≠ncrona
                try:
                    eliminados = await converter.limpiar_pdfs_antiguos_async(PDF_OUTPUT_DIR, dias=1)
                    if eliminados:
                        print(f"üóëÔ∏è Eliminados {eliminados} PDFs antiguos")
                except Exception as cleanup_error:
                    print(f"Advertencia en limpieza: {cleanup_error}")
                    
                # Devolver informaci√≥n completa del archivo
                return {
                    "filename": pdf_filename,
                    "file_size": file_size,
                    "success": True
                }
            else:
                return {
                    "success": False,
                    "error": f"PDF no encontrado despu√©s de la conversi√≥n: {pdf_filename}"
                }
        else:
            print(f"‚ùå Error generando PDF: {resultado['message']}")
            return {
                "success": False,
                "error": resultado['message']
            }
            
    except Exception as e:
        print(f"Error en procesamiento as√≠ncrono: {e}")
        return {
            "success": False,
            "error": str(e)
        }

def selenium_dni(user_dni):
    """Wrapper s√≠ncrono para la funci√≥n as√≠ncrona"""
    return asyncio.run(selenium_dni_async(user_dni))